syntax = "proto3";

package lumbay2sv;

option go_package="lumbay2sv/main";

service LumbayLumbay {
    rpc SendRequest(Request) returns (Reply) {}
    rpc Subscribe(Empty) returns (stream Update) {}
}

message Update {
    int64 sequence_number = 1;
    oneof type {
        Ping ping = 2;
        YouAreInGameUpdate you_are_in_game_update = 3;
        WaitingForOtherPlayerUpdate waiting_for_other_player_update = 4;
        ReadyToStartUpdate ready_to_start_update = 5;
        GameCodeGeneratedUpdate game_code_generated = 6;
        YouQuitTheGameUpdate you_quit_the_game_update = 7;
        GameStartedUpdate game_started_update = 8;
        WorldUpdate world_update = 9;
        WorldStatusUpdate world_status_update = 10;
        WorldRegionStatusUpdate world_region_status_update = 11;
        WorldObjectUpdate world_object_update = 12;
    }
}

message Request {
    oneof type {
        AcquireClientIdRequest acquire_client_id_request = 1;
        AcquirePublicKeyRequest acquire_public_key_request = 2;
        CreateGameRequest create_game_request = 3;
        GenerateGameCodeRequest generate_game_code_request = 4;
        JoinGameRequest join_game_request = 5;
        QuitGameRequest quit_game_request = 6;
        StartGameRequest start_game_request = 7;
        AmendWorldObjectRequest amend_world_object_request = 8;
    }
}

message Reply {
    oneof type {
        AcquireClientIdReply acquire_client_id_reply = 1;
        AcquirePublicKeyReply acquire_public_key_reply = 2;
        CreateGameReply create_game_reply = 3;
        GenerateGameCodeReply generate_game_code_reply = 4;
        JoinGameReply join_game_reply = 5;
        QuitGameReply quit_game_reply = 6;
        StartGameReply start_game_reply = 7;
        AmendWorldObjectReply amend_world_object_reply = 8;
    }
}

message WorldStatus {
    oneof type {
        WorldOneStatus world_one_status = 1;
    }
}

message Empty {}

message AcquireClientIdRequest {
}

message AcquirePublicKeyRequest {
    string name = 1;
}

message AcquireClientIdReply {
    string client_id = 1;
}

message AcquirePublicKeyReply {
    string public_key = 1;
}

message CreateGameRequest {
}

message CreateGameReply {
}

message GenerateGameCodeRequest {
}

message GenerateGameCodeReply {
}

message JoinGameRequest {
    string gameCode = 1;
}

message JoinGameReply {
}

message QuitGameRequest {
}

message QuitGameReply {
}

message StartGameRequest {
}

message StartGameReply {
}

message AmendWorldObjectRequest {
    string world_id = 1;
    string world_region_id = 2;
    WorldObject world_object = 3;
}

message AmendWorldObjectReply {
}

message Game {
    string id = 1;
    string player1 = 2;
    string player2 = 3;
    GameStatus status = 4;
}

message Client {
    string id = 1;
    string salt = 2;
}

message World {
    string id = 1;
    string name = 2;
    WorldStatus status = 3;
    WorldMap map = 4;
    repeated WorldRegion region = 5;
}

message WorldRegion {
    string id = 1;
    string name = 2;
    WorldStatus status = 3;
    WorldMap map = 4;
    repeated WorldObject objects = 5;
}

message WorldMap {
    string id = 1;
    int64 height = 2;
    int64 width = 3;
}

message WorldMapLocation {
    int64 x = 1;
    int64 y = 2;
}

message WorldOneObject {
    string id = 1;
}

message WorldObject {
    WorldMapLocation location = 1;
    oneof type {
        WorldOneObject world_one_object = 2;
    }
}

message Ping {
}

message YouAreInGameUpdate {
}

message WaitingForOtherPlayerUpdate {
}

message ReadyToStartUpdate {
}

message GameCodeGeneratedUpdate {
    string game_code = 1;
}

message YouQuitTheGameUpdate {
}

message GameStartedUpdate {
}

message WorldUpdate {
    World world = 1;
}

message WorldStatusUpdate {
    string world_id = 1;
    WorldStatus status = 2;
}

message WorldRegionStatusUpdate {
    string world_id = 1;
    string world_region_id = 2;
    WorldStatus status = 3;
}

message WorldObjectUpdate {
    string world_id = 1;
    string world_region_id = 2;
    WorldObject world_object = 3;
}

enum GameStatus {
    NONE = 0;
    WAITING_FOR_OTHER_PLAYER = 1;
    READY_TO_START = 2;
    STARTED = 3;
}

enum WorldOneStatus {
    WORLD_ONE_STATUS_NOTHING = 0;
    WORLD_ONE_STATUS_PLAYER_1_TO_MOVE = 1;
    WORLD_ONE_STATUS_PLAYER_2_TO_MOVE = 2;
    WORLD_ONE_STATUS_PLAYER_1_WINS = 3;
    WORLD_ONE_STATUS_PLAYER_2_WINS = 4;
    WORLD_ONE_STATUS_DRAW = 5;
}
